### 程

------

##### 多线程

- 递归互斥量和非递归互斥量。pthread函数，保证线程安全，不保证是异步信号安全的。默认非递归互斥量，使用非递归互斥量时，可能会出现信号处理程序将线程中断，其他的线程就去请求互斥锁，这样就出现了阻塞，导致死锁。
- 线程安全

##### 文件系统调用

- **read**:执行该调用时，在内核中，会锁住所涉及的索引节点，其他操作改节点的进程都会睡眠等待，这个是在内核态；在用户态中，在系统调用完的前一时刻，会解锁该索引节点。这样的逻辑，保证了数据在内核态下数据结构一致。 

### 计算机网络

------

##### TCP的拥塞控制

方法：慢开始、拥塞避免、快重传、快恢复

##### 经受延时确认

- 延时的时间一般由内核决定，TCP使用的一个200ms的定时器
- 累积确认：发送方发送速度非常快，接收方一下就收好多个TCP段，通过累积确认，一下子确认好多个TCP段，这样减少了报文的传输
- 捎带确认：TCP接受数据后不立即返回ACK,它推迟发送，以便将ACK于需要沿该方向的数据一起发送
- 例1：客户端一直想服务端send数据，第一次数据送到服务端后，服务端受到后，向客户端返回确认，此时会等待一个200ms的延时，这里的目的是累积确认，因为服务端一直都在send数据，TCP等待定时器溢出之后，才会回复一个ACK ,这个ACK是对这两次数据的确认，这就是延时确认。证明的方法，在两次数据发送之间加一个sleep函数，抓包发现，每一次发送数据完，200ms左右就会恢复ACK,证明了TCP经受延时确认机制的存在。
- 例2：稍后证明



##### Nagle算法

- 该算法要求一个TCP连接上最多只能有一个未被确认完成的分组，在该分组的确认到达之前不发送其他的小分组。相反，TCP收集这些少量的分组，并在确认到来时以一个分组的方式发出去。减少了发送包的数量
- 例1：通过关闭Nagle算法，就能看出这个程序的差别，可以通过setsockopt函数设置TCP_NODELAY关闭该算法。客户端一直给服务端发送数据，这个时候，比如，将"hello" 拆分一个一个的字节发送，抓包发现，第一次是“h”,第二次是“ello”,这表明，nagle算法的原因，在上一个包的ACK未到来之前，将ello缓存到了TCP的发送区，之后一并发送。如果关闭了nagle算法，就会每次发送一个字节，不会合并发出。

##### 经受时延确认与Nagle算法

- 这两个算法，是有区别的。经受时延确认是必现等待，无法关闭。Nagle是可关闭的。经受时延减少了网络上确认包的数量，Nagle减少的是网络上的小包。

##### TCP滑动窗口

- 窗口左边沿向右边沿靠近称为窗口合拢，这种现象发生在数据别发送和确认的时候
- 当窗口右边沿向右移动时将允许发送更多的数据，称为窗口张开，这种现象发生在另一端的接收进程读取已经确认的数据并释放了TCP接收缓存
- 窗口右边向左边移动的情况，在某种情况下会产生吗，但一般不存在！

##### TCP的超时与重传

###### 四个定时器：

1. 重传定时器使用于当希望收到另一端的确认。
2. 坚持（persist）定时器使窗口代销信息保持不断流动，即使另一端关闭了其接收窗口
3. 保活（keepalive）定时器可检测到一个空闲的连接的另一端何时崩溃或重启
4. 2MSL定时器测量一个连接处于TIME_WAIT状态的时间

​	TCP是可靠传输，通过重传定时器，定时器溢出时还没接收到对端的ACK,则重传这个报文。当重传到最大数后仍未成功，则会发送RST标志放弃。关键是如何设置超时的时间和重传的频率。

​	TCP超时的时间很大程度上依赖RTT（Round-trip Time）往返时间。因为网络的状况复杂多变，所以RTT不可能一成不变的，所以TCP得根据实际情况来更新RTT的时间，公式 RTT = 0.9*RTT + 0.1*M(M是新测量的RTT时间)，0.9是一个推荐的平滑因子，每一次测量RTT时，这个被平滑的RTT将被更新。

​	重传超时时间间隔为RTO(Retransmission TimeOut),RTO 依赖于被平滑的RTT和依赖于被平滑的均值偏差。因为均值偏差能反映网络的波动状态。

##### 慢启动

- 拥塞窗口是发送方使用的流量控制，通告窗口是接收方使用的流量控制；前者是发送方感受到的网络拥塞的估计，后者是接收方再该连接上可以用的缓存大小有关

##### 拥塞避免算法

- 拥塞避免和慢启动是两个目的不同，独立的算法。当拥塞发生时，我们希望降低分组进入网络的传输速率，于是可以调用慢启动算法来做到这一点，实际上这两个算法通常一起实现。
- 拥塞避免算法和慢启动算法需要对每个连接保持两个变量，拥塞窗口cwnd和慢启动门限ssthresh,流程如下：
  1. 对于一个给定的连接，cwnd初始化为1，ssthresh为65535
  2. TCP传输的过程中不能超过cwnd和接收方通告窗口的大小
  3. 当拥塞避免发生时，ssthresh为当前窗口的一半（cwnd和通告窗口的最小值）。如果超时引起的拥塞，则cwnd被置为1，即慢启动
  4. 当新数据被对方确认时，就增加cwnd，但是cwnd增加的方法依赖于是否进行慢启动和拥塞避免。如果cwnd小于或等于ssthresh，则慢启动；如果cwnd 大于 ssthresh的一半时，则拥塞避免。慢启动时cwnd是指数增加，拥塞避免时，是以线性的方式增加

##### 快速重传和快速恢复算法

​	重复的ACK目的在于让对方知道收到了一个时序的报文段，并告知对方自己需要收到的序号。由于TCP不知道这个重复的ACK是由于丢包引起的，还是仅仅了几个报文段的重新排序，因此需要等待少量重复的ACK到来。如果是报文段的重新排序，则被重新排序的报文段被处理并产生一个新的ACK之前，只可能产生一两个重复的ACK。而如果收到一串或者3个以上，则说明是对视了报文段，此时无需等待超时定时器溢出，直接重新发送丢失的报文段，这就是快速重传算法。然后，接下来执行的是拥塞避免算法而不是慢启动，这就是快速恢复算法。之所以使用慢启动算法，是因为不想突然减少网络中的数据流。

##### TCP的坚持定时器

​	在连接一方需要发送数据，但对端已经通告窗口大小为0时，就需要设置TCP坚持定时器。在定时器时间到来时，仍未收到对端的通告窗口大小，需要发送数据的这一端将会去探查通告窗口更新是否丢失。窗口探查包包含一个字节的数据，TCP会不断的发送窗口探查包，这个过程持续到窗口被打开，或者应用进程使用的连接终止。

​	而窗口的更新，需要避免糊涂窗口综合症的发生。

##### 糊涂窗口综合症

​	糊涂窗口综合症本质上就会小包的问题，网络发送一个字节就需要20个IP首部，20个TCP首部，极大浪费了效率。避免的措施可以从接收方和发送方两端展开。

- 接收方不通告小窗口。通常的算法是接收方不会去通告一个比当前大的窗口，那在什么情况下通告呢？在窗口大小可以增加一个报文段的大小，或者接收方缓存区的一半。比如从0到1，依旧还是小窗口，等接收方可以处理更大的窗口时，在把通告窗口发给发送方。
- 发送方避免糊涂窗口综合症的措施只有以下条件之一满足是才发送数据：
  1. 可以发送一个满长度的报文段
  2. 可以发送接收方通告窗口一半大小的报文段
  3. Nagle算法减少了网络上小包的数量



### C/C++基础

------

##### 指针

- 函数指针、函数转移表
- 智能指针

##### 宏

- 四字节对齐

  ```c
  #define ROUNDUP4(size) ((size) % 4)) ? （size) + (4 - ((size) % 4))：（size）
  ```



##### 浅复制和深复制

​	如果类中包含了使用new初始化的指正成员，应当定义一个复制构造函数，以复制指向的数据，而不是指针，这叫做深复制；复制的另一种形式叫浅复制（成员复制）只复制指正值，仅仅是地址而已。

​	如果使用浅复制，在析构函数的时候会出现问题。当复制构造函数的临时对象被析构之后，指正成员所指的那块内存也会被释放，等程序在去析构的时候，这个指针的内存再去析构，此时就会出现段错误。

### 操作系统

------

##### 进程结构

​	内核把一个进程的虚地址空间分为若干个逻辑区。区是进程虚地址空间上的一段连续的区域，可把这段区域看做是可被共享和保护的独立实体。



### 脚本学习

------





### 源码学习系列

------

##### GoAhead服务器

```
  	1. 如何上传数据
  	2. 如何接收Http请求
```

###### 初始化阶段

- 程序一开会malloc一个60K的内存，程序退出后，需要close掉。

###### Url注册

- 



### Muduo

#### 文件传输工具

- 发送一个100M的文件，支持上万个并发客户链接；内存消耗只与并发连接数有关，跟文件大小无关；任何连接可以在任何时候断开，程序不会有内存泄漏或崩溃
- Ver1.一次性把文件读入内存，一次性调用send发送完毕，无法满足“内存消耗只与并发连接数有关，跟文件大小无关”，这个版本有明显的缺陷，内存消耗与（并发连接数x文件大小）成正比，文件越大消耗越多
- Ver2.一块一块地发送文件，减少内存使用。采用流水线的思路。
- Ver3.在Ver2的基础上，使用shared_ptr减轻资源管理的负担，使得FILE*的生命周期和TcpConnection一样长。这体现了现代C++的资源管理思路，无须手动释放资源，而是通过将资源与对象生命期绑定，在对象析构的时候自动释放资源，从而把资源管理转换为对象生命期的管理，这正是C++的RAII



------



### 智能指针

```c++
#include <iostream>
#include <memory>
#include <string>
#include <algorithm>

using std::string;
using std::cout;
using std::endl;

class Parent;

typedef std::shared_ptr<Parent> ParentPtr;

class Child
{
	public:
		Child(const ParentPtr &myMom_, const ParentPtr &myDad_,const string name_):myMom(myMom_),myDad(myDad_),name(name_){}
		void myName(){std::cout<<"my name is "<<name<<std::endl;}
		~Child()
		{
			cout<<"~Child call "<<endl;
		}
	private:
		std::weak_ptr<Parent> myMom;
		std::weak_ptr<Parent> myDad;
		string name;
		
};

typedef std::shared_ptr<Child> ChildPtr;

class Parent
{
	public:
		Parent(){}
		void setSpouse(const ParentPtr &spouse)
		{
			mySpouse = spouse;
		}
		void setChild(const ChildPtr &child)
		{
			MyChilde.push_back(child);
		}
		~Parent()
		{
			cout<<"~Parent call "<<endl;
		}
	private:
		std::weak_ptr<Parent> mySpouse;
		std::vector<ChildPtr> MyChilde;
		//string name;
};

int main()
{
	ParentPtr mom(new Parent);
	ParentPtr dad(new Parent);
	
	cout<<"mom use count "<<mom.use_count()<<endl;
	cout<<"dad use count "<<dad.use_count()<<endl;
	
	mom->setSpouse(dad);
	dad->setSpouse(mom);
	
	cout<<"after set spouse"<<endl;
	cout<<"mom use count "<<mom.use_count()<<endl;
	cout<<"dad use count "<<dad.use_count()<<endl;
	
	ChildPtr child(new Child(mom,dad,"Jack"));
	cout<<"new a child"<<endl;
	cout<<"child use count "<<child.use_count()<<endl;
	
	mom->setChild(child);
	dad->setChild(child);
	cout<<"after get a child"<<endl;
	cout<<"mom use count "<<mom.use_count()<<endl;
	cout<<"dad use count "<<dad.use_count()<<endl;
	cout<<"child use count "<<child.use_count()<<endl;
	
	child->myName();
    
	return 0;
}

/**********************************************
mom use count 1
dad use count 1
after set spouse
mom use count 1
dad use count 1
new a child
child use count 1
after get a child
mom use count 1
dad use count 1
child use count 3
my name is Jack
~Parent call 
~Parent call 
~Child call 
********************************************** */
```



### C++智能指针

#### auto_ptr/unique_ptr

​	在c++11出来只有，摈弃了使用多年的auto_ptr，却而代之的是unique_ptr,shared_ptr,weak_ptr。

​	auto_ptr,需要建立所有权的概念，举个例子

```c++
auto_ptr<string> ps (new string("hello world!"));//ps 获得了改字符串的所有权
auto_ptr<string> tmp;
tmp = ps；		   //ps将字符串转让给了tmp,此时ps是个空指针，当下一行打印ps时，出现段错误
std::cout<<ps<<endl;//Segmentation fault
```

​	unique_ptr的功能和策略其实和auto_ptr类似，同样需要建立所有权的概念。unique_ptr比auto_ptr更安全，因为在```tmp = ps```时，程序就会编译失败，不允许这样的操作。这就是unqiue_ptr比auto_ptr安全的地方。unique_ptr可以就收函数返回的临时对象，因为临时对象在函数调用完后就会被销毁，没有机会再调用这个临时对象，所以编译器允许了这样的操作。

​	unique_ptr与auto_ptr的另一个区别是，unqiue_ptr是一个可用于数组的变体。而auto_ptr只能使用new.

```c++
std::unique_ptr<int []>pda (new(int(5))); //use delete[]
```

#### shared_ptr/weak_ptr

​	shared_ptr是引用计数型指针。引入计数是自动化资源管理常用的方法，当引用计数为0时，对象（资源）就会被销毁。weak_ptr也是一个引用计数型指针，但它不增加对象引用的次数，weak_ptr是作为辅佐shared_ptr存在，可以解决引用成环的问题。

​	shared_ptr控制对象的生命期。shared_ptr是强引用，只要有一个指向x对象的shared_ptr存在，该对象就不会析构。当指向对向x的最后一个shared_ptr析构是，x保证会被销毁

​	智能指针的优势：一旦对象不再被引用，系统刻不容缓，立刻回收内存。这通常发生在关键任务完成后的清理时期，不会影响关键任务的实时性，同时，内存里多有的对象都是可用的，绝对没有垃圾空占内存。

博客推荐：

- https://blog.csdn.net/albertsh/article/details/82286999



------



### 数据库索引

​	官方定：索引是帮助Mysql高效获取数据的**数据结构**。所以，索引的本质是数据结构！！索引是在表上的列上创建的。索引有多重类型，如BTree索引，哈希索引，全文索引等等等。

#### 哈希索引

​	用哈希索引的原因是，在寻找值时哈希表效率极高。所以，如果使用哈希索引，对于比较字符串是否相等的查询能够极快的检索出的值。例如之前我们讨论过的这个查询(SELECT * FROM Employee WHERE Employee_Name = ‘Jesus’) 就可以受益于创建在Employee_Name 列上的哈希索引。哈系索引的工作方式是将列的值作为索引的键值（key），和键值相对应实际的值（value）是指向该表中相应行的指针。因为哈希表基本上可以看作是关联数组，一个典型的数据项就像“Jesus => 0x28939″，而0x28939是对内存中表中包含Jesus这一行的引用。在哈系索引的中查询一个像“Jesus”这样的值，并得到对应行的在内存中的引用，明显要比扫描全表获得值为“Jesus”的行的方式快很多。**哈希表是无顺的数据结构**，对于很多类型的查询语句哈希索引都无能为力。举例来说，假如你想要找出所有小于40岁的员工。你怎么使用使用哈希索引进行查询？这不可行，**因为哈希表只适合查询键值对-也就是说查询相等的查询**（例：like “WHERE name = ‘Jesus’）。哈希表的键值映射也暗示其键的存储是无序的。这就是为什么哈希索引通常不是数据库索引的默认数据结构-**因为在作为索引的数据结构时，其不像B-Tree那么灵活**



博客推荐：

<http://blog.codinglabs.org/articles/theory-of-mysql-index.html>
